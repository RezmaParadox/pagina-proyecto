{
  "stats": {
    "suites": 5,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-01T00:22:12.307Z",
    "end": "2025-02-01T00:22:34.397Z",
    "duration": 22090,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7f55cfbe-191f-425c-b9f5-e6835f4567bc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a49063eb-d5c2-409e-ba93-29e4f2e91f2c",
          "title": "Ordenar los productos por precio",
          "fullFile": "C:\\Users\\VOSTRO 3400\\Documents\\Academia Frontend\\Ejercicio pagina\\tests\\filterProducts.spec.js",
          "file": "\\tests\\filterProducts.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Ordenar los productos por precio\"",
              "fullTitle": "Ordenar los productos por precio \"before all\" hook in \"Ordenar los productos por precio\"",
              "timedOut": null,
              "duration": 4359,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get(\"http://127.0.0.1:3000/tienda.html\");",
              "err": {},
              "uuid": "23b0ba23-4124-4e49-98e2-43803240bba1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Ordenar los productos por precio\"",
              "fullTitle": "Ordenar los productos por precio \"after all\" hook in \"Ordenar los productos por precio\"",
              "timedOut": null,
              "duration": 1010,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "0c3b72d7-9b9e-47d9-8b4a-18ff53ba9de8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "De mayor a menor",
              "fullTitle": "Ordenar los productos por precio De mayor a menor",
              "timedOut": null,
              "duration": 1191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el componente\nlet selector = await driver.findElement(By.id(\"ordenar\"));\n//Se selecciona la opcion de mayor a menor\nawait selector.findElement(By.css(\"option[value='mayor']\")).click();\n//Se obtiene la lista de productos\nlet listaProductos = await driver.findElements(By.className(\"card-price\"));\n// Se itera sobre los productos para obtener su precio\nlet precios = await Promise.all(listaProductos.map(async producto => {\n    // Se obtiene el contenido del componente\n    let text = await producto.getText();\n    // Se eliminan los caracteres adicionales\n    return parseFloat(text.replace(/[\\$USD]/g,\"\").trim());\n}))\nconsole.log(precios)\n// Comprueba que el precio del anterior sea mayor\nassert(precios.every( (precio, index) => index === 0 || precio <= precios[index-1]),\n  \"Los precios de los productos no se ordenan de mayor a menor\")",
              "err": {},
              "uuid": "dda22f34-a8bc-4f03-8593-c42d265df064",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "De menor a mayor",
              "fullTitle": "Ordenar los productos por precio De menor a mayor",
              "timedOut": null,
              "duration": 680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el componente\nlet selector = await driver.findElement(By.id(\"ordenar\"));\n//Se selecciona la opcion de mayor a menor\nawait selector.findElement(By.css(\"option[value='menor']\")).click();\n//Se obtiene la lista de productos\nlet listaProductos = await driver.findElements(By.className(\"card-price\"));\n// Se itera sobre los productos para obtener su precio\nlet precios = await Promise.all(listaProductos.map(async producto => {\n    // Se obtiene el contenido del componente\n    let text = await producto.getText();\n    // Se eliminan los caracteres adicionales\n    return parseFloat(text.replace(/[\\$USD]/g,\"\").trim());\n}))\nconsole.log(precios)\n// Comprueba que el precio del anterior sea mayor\nassert(precios.every( (precio, index) => index === 0 || precio >= precios[index-1]),\n  \"Los precios de los productos no se ordenan de menor a mayor\")",
              "err": {},
              "uuid": "24740d93-d446-4f86-bc95-50d1fe9e0691",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dda22f34-a8bc-4f03-8593-c42d265df064",
            "24740d93-d446-4f86-bc95-50d1fe9e0691"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1871,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5846842c-368b-4685-adb8-735c29755c3f",
          "title": "Funciones de los detalles de compra",
          "fullFile": "C:\\Users\\VOSTRO 3400\\Documents\\Academia Frontend\\Ejercicio pagina\\tests\\purchaseDetails.spec.js",
          "file": "\\tests\\purchaseDetails.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Funciones de los detalles de compra\"",
              "fullTitle": "Funciones de los detalles de compra \"before all\" hook in \"Funciones de los detalles de compra\"",
              "timedOut": null,
              "duration": 7140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get(\"http://127.0.0.1:3000/tienda.html\");\n//Se manda a llamar la lista de productos\nlet listaProductos = await driver.findElements(By.css(\"#cards .card\"));\n//Cantidad de productos\nlet cantidadPrueba = 2;\nfor (let i = 0; i < cantidadPrueba; i++) {\n  //Se guardan los productos\n  let productoPrueba = listaProductos[i];\n  await productoPrueba.click();\n  await driver.wait(until.elementLocated(By.className(\"modal\")));\n  //Se obtienen los botones de tallas\n  let botonesTallas = await driver.findElements(\n    By.className(\"modal-talla\")\n  );\n  //Se guarda la primera talla\n  let tallaPrueba = botonesTallas[0];\n  //Se obtienen los botones de colores\n  let botonesColores = await driver.findElements(\n    By.className(\"modal-color\")\n  );\n  //Se guarda el primer color\n  let colorPrueba = botonesColores[0];\n  await tallaPrueba.click();\n  await colorPrueba.click();\n  //Se obtiene el boton de comprar\n  let botonComprar = await driver.findElement(By.className(\"add-to-cart\"));\n  //Se hace click\n  await botonComprar.click();\n  //Se obtiene el boton cerrar\n  let botonCerrar = await driver.findElement(By.className(\"close-modal\"));\n  //Se hace click\n  await botonCerrar.click();\n}\n//Se obtiene el boton de carrito\nlet botonCarrito = await driver.findElement(By.id(\"cart-btn\"));\nawait botonCarrito.click();\n//Se manda a llamar el boton de finalizar compra\nlet botonFinalizar = await driver.findElement(By.className(\"buy-button\"));\nawait botonFinalizar.click();",
              "err": {},
              "uuid": "cfae359e-b407-4612-9572-ef8ec9d1ae9c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Funciones de los detalles de compra\"",
              "fullTitle": "Funciones de los detalles de compra \"after all\" hook in \"Funciones de los detalles de compra\"",
              "timedOut": null,
              "duration": 572,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "71a95c39-f484-4710-a0f2-91d2dfa7dc33",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Ordenar los productos por precio ascendente",
              "fullTitle": "Funciones de los detalles de compra Ordenar los productos por precio ascendente",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de ascendente\nlet botonesAscendente = await driver.findElements(By.id(\"btn-asc\"));\nlet botonPrecio = botonesAscendente[3];\nawait botonPrecio.click();\nlet tabla = await driver.findElement(By.className(\"carrito-table\"));\nlet filas = await tabla.findElements(By.css(\"tr\"));\nlet precios = [];\nfor (let i = 1; i < filas.length; i++) {\n  let celdas = await filas[i].findElements(By.css(\"td\"));\n  if (celdas.length > 4) {\n    let precio = await celdas[4].getText();\n    precio = precio.replace(\"$\", \"\");\n    precios.push(parseFloat(precio));\n  }\n}\nassert(\n  precios.every(\n    (precio, index) => index === 0 || precio <= precios[index - 1]\n  ),\n  \"Los precios de los productos no se ordenan de mayor a menor\"\n);",
              "err": {},
              "uuid": "212ba529-832a-42d9-b077-aa5f11fdf610",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ordenar los productos por precio descendente",
              "fullTitle": "Funciones de los detalles de compra Ordenar los productos por precio descendente",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de descendente\nlet botonesDescendente = await driver.findElements(By.id(\"btn-desc\"));\nlet botonPrecio = botonesDescendente[3];\nawait botonPrecio.click();\nlet tabla = await driver.findElement(By.className(\"carrito-table\"));\nlet filas = await tabla.findElements(By.css(\"tr\"));\nlet precios = [];\nfor (let i = 1; i < filas.length; i++) {\n  let celdas = await filas[i].findElements(By.css(\"td\"));\n  if (celdas.length > 4) {\n    let precio = await celdas[4].getText();\n    precio = precio.replace(\"$\", \"\");\n    precios.push(parseFloat(precio));\n  }\n}\nassert(\n  precios.every(\n    (precio, index) => index === 0 || precio >= precios[index - 1]\n  ),\n  \"Los precios de los productos no se ordenan de menor a mayor\"\n);",
              "err": {},
              "uuid": "29951090-b0a4-457d-8d69-cdb5d8c0eec8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ordenar el nombre de los productos alfabeticamente",
              "fullTitle": "Funciones de los detalles de compra Ordenar el nombre de los productos alfabeticamente",
              "timedOut": null,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de ascendente\nlet botonesAscendente = await driver.findElements(By.id(\"btn-asc\"));\nlet botonAlfabeticamente = botonesAscendente[2];\nawait botonAlfabeticamente.click();\nlet tabla = await driver.findElement(By.className(\"carrito-table\"));\nlet filas = await tabla.findElements(By.css(\"tr\"));\nlet nombres = [];\nfor (let i = 1; i < filas.length; i++) {\n  let celdas = await filas[i].findElements(By.css(\"td\"));\n  if (celdas.length > 4) {\n    let nombre = await celdas[1].getText();\n    nombres.push(nombre);\n  }\n}\nassert(\n  nombres.every(\n    (nombre, index) =>\n      index === 0 || nombre.localeCompare(nombres[index - 1]) > 0\n  ),\n  \"Los nombres de los productos no se ordenan alfabeticamente\"\n);",
              "err": {},
              "uuid": "73f822ca-f540-46ac-970c-fe9b7d59c83a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ordenar el nombre de los productos alfabeticamente en reversa",
              "fullTitle": "Funciones de los detalles de compra Ordenar el nombre de los productos alfabeticamente en reversa",
              "timedOut": null,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de descendente\nlet botonAlfabeticamenteD = await driver.findElement(\n  By.id(\"btn-desc-letra\")\n);\nawait botonAlfabeticamenteD.click();\nlet tabla = await driver.findElement(By.className(\"carrito-table\"));\nlet filas = await tabla.findElements(By.css(\"tr\"));\nlet nombres = [];\nfor (let i = 1; i < filas.length; i++) {\n  let celdas = await filas[i].findElements(By.css(\"td\"));\n  if (celdas.length > 4) {\n    let nombre = await celdas[1].getText();\n    nombres.push(nombre);\n  }\n}\nassert(\n  nombres.every(\n    (nombre, index) =>\n      index === 0 || nombre.localeCompare(nombres[index - 1]) < 0\n  ),\n  \"Los nombres de los productos no se ordeno en reversa\"\n);",
              "err": {},
              "uuid": "031fd16d-1551-4694-9c07-67ed0fa7358b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Eliminar producto",
              "fullTitle": "Funciones de los detalles de compra Eliminar producto",
              "timedOut": null,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de eliminar y la lista de productos\nlet tabla = await driver.findElement(By.className(\"carrito-table\"));\nlet filasAntes = await tabla.findElements(By.css(\"tr\"));\nlet elementoEliminar = filasAntes[1];\nawait elementoEliminar.findElement(By.className(\"btn-danger\")).click();\nlet filasDespues = await tabla.findElements(By.css(\"tr\"));\nassert(\n  filasAntes.length !== filasDespues.length,\n  \"El producto no se elimino\"\n);",
              "err": {},
              "uuid": "c0be84ee-6f3c-43d7-a139-ce76a1236776",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "212ba529-832a-42d9-b077-aa5f11fdf610",
            "29951090-b0a4-457d-8d69-cdb5d8c0eec8",
            "73f822ca-f540-46ac-970c-fe9b7d59c83a",
            "031fd16d-1551-4694-9c07-67ed0fa7358b",
            "c0be84ee-6f3c-43d7-a139-ce76a1236776"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 653,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "b661f010-5a78-4820-ac48-9a4e6e378811",
          "title": "Buscar productos en la tienda",
          "fullFile": "C:\\Users\\VOSTRO 3400\\Documents\\Academia Frontend\\Ejercicio pagina\\tests\\searchInput.spec.js",
          "file": "\\tests\\searchInput.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Buscar productos en la tienda\"",
              "fullTitle": "Buscar productos en la tienda \"before all\" hook in \"Buscar productos en la tienda\"",
              "timedOut": null,
              "duration": 2484,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get(\"http://127.0.0.1:3000/tienda.html\");",
              "err": {},
              "uuid": "ea0255bf-f89a-4a6e-b076-9c8ee62daef7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Buscar productos en la tienda\"",
              "fullTitle": "Buscar productos en la tienda \"after all\" hook in \"Buscar productos en la tienda\"",
              "timedOut": null,
              "duration": 1440,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "d8db784d-c32f-4c28-8f79-87fd8184c122",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Coincidencias parciales de busqueda",
              "fullTitle": "Buscar productos en la tienda Coincidencias parciales de busqueda",
              "timedOut": null,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamr el componente\nlet inputSearch = await driver.findElement(By.id(\"busqueda\"));\n//Dato parcial\nlet testValue = \"prime\";\n//Se introduce el valor parcial\nawait inputSearch.sendKeys(testValue);\n//Se obtiene la lista de productos\nlet listaProductos = await driver.findElements(By.className(\"card-title\"));\n// Se itera sobre los productos\nfor (let producto of listaProductos) {\n  //Se obtiene su valor\n  let value = await producto.getText();\n  // Se comprueba que contenga el valor parcial\n  assert(value.includes(testValue),\n    \"El producto no contiene el valor parcial\");\n}",
              "err": {},
              "uuid": "7b99e7a9-3fce-4200-a00c-c119f1cc2a31",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Coincidencias con caracteres especiales",
              "fullTitle": "Buscar productos en la tienda Coincidencias con caracteres especiales",
              "timedOut": null,
              "duration": 812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let inputSearch = await driver.findElement(By.id(\"busqueda\"));\nawait inputSearch.clear();\n//Dato con caracteres especiales\nlet testValue = \"Andrés\";\nawait inputSearch.sendKeys(testValue);\nlet listaProductos = await driver.findElements(By.className(\"card-title\"));\nfor (let producto of listaProductos) {\n  //Se obtiene su valor\n  let value = await producto.getText();\n  // Se comprueba que contenga el valor con caracteres especiales\n  assert(value.includes(testValue),\n    \"El producto no contiene el valor con caracteres especiales\");\n}",
              "err": {},
              "uuid": "df8d7129-646f-4808-bf0e-215a11e88a97",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sin resultados de busqueda",
              "fullTitle": "Buscar productos en la tienda Sin resultados de busqueda",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let inputSearch = await driver.findElement(By.id(\"busqueda\"));\nawait inputSearch.clear();\nlet testValue = \"ssdsd\";\nawait inputSearch.sendKeys(testValue);\nlet listaProductos = await driver.findElements(By.className(\"card-title\"));\n//Se comprueba la longitud de los resultados\nassert(listaProductos.length === 0,\n  \"Si muestra resultados de busqueda\"\n);",
              "err": {},
              "uuid": "ad2a9f00-bafe-43a8-87db-bbf09ddbe199",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b99e7a9-3fce-4200-a00c-c119f1cc2a31",
            "df8d7129-646f-4808-bf0e-215a11e88a97",
            "ad2a9f00-bafe-43a8-87db-bbf09ddbe199"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1524,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "28e65d8c-02e7-4f79-adc6-53a501b346f7",
          "title": "Funciones del carrito de compras",
          "fullFile": "C:\\Users\\VOSTRO 3400\\Documents\\Academia Frontend\\Ejercicio pagina\\tests\\cartShopping.spec.js",
          "file": "\\tests\\cartShopping.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Funciones del carrito de compras\"",
              "fullTitle": "Funciones del carrito de compras \"before each\" hook in \"Funciones del carrito de compras\"",
              "timedOut": null,
              "duration": 3584,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get(\"http://127.0.0.1:3000/tienda.html\");\n//Se manda a llamar la lista de productos\nlet listaProductos = await driver.findElements(By.css(\"#cards .card\"));\n//Se guardan los productos\nlet productoPrueba = listaProductos[0];\n//Se selecciona el producto\nawait productoPrueba.click();\n//Se obtienen los botones de tallas\nlet botonesTallas = await driver.findElements(By.className(\"modal-talla\"));\n//Se guarda la primera talla\nlet tallaPrueba = botonesTallas[0];\n//Se obtienen los botones de colores\nlet botonesColores = await driver.findElements(By.className(\"modal-color\"));\n//Se guarda el primer color\nlet colorPrueba = botonesColores[0];\nawait tallaPrueba.click();\nawait colorPrueba.click();\n//Se obtiene el boton de comprar\nlet botonComprar = await driver.findElement(By.className(\"add-to-cart\"));\n//Se hace click\nawait botonComprar.click();",
              "err": {},
              "uuid": "59ec108d-79e3-4a9c-853b-68ff4811ea1d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Funciones del carrito de compras\"",
              "fullTitle": "Funciones del carrito de compras \"after each\" hook in \"Funciones del carrito de compras\"",
              "timedOut": null,
              "duration": 1160,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "04026730-14a3-42d5-8ce3-68dcbf7c98de",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Aumentar la cantidad y precio de un producto",
              "fullTitle": "Funciones del carrito de compras Aumentar la cantidad y precio de un producto",
              "timedOut": null,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de aumentar, cantidad y precio\nlet botonAumentar = await driver.findElement(\n  By.className(\"increase-button\")\n);\nlet cantidadA = await driver\n  .findElement(By.className(\"quantity\"))\n  .getText();\nlet precioProductoA = await driver\n  .findElement(By.id(\"precio-producto\"))\n  .getText();\nlet precioTotalA = await driver\n  .findElement(By.id(\"precio-total\"))\n  .getText();\nprecioProductoA = extraerPrecio(cantidadA);\nprecioTotalA = extraerPrecio(cantidadA);\nawait botonAumentar.click();\nlet cantidadD = await driver\n  .findElement(By.className(\"quantity\"))\n  .getText();\nlet precioProductoD = await driver\n  .findElement(By.id(\"precio-producto\"))\n  .getText();\nlet precioTotalD = await driver\n  .findElement(By.id(\"precio-total\"))\n  .getText();\nprecioProductoD = extraerPrecio(cantidadD);\nprecioTotalD = extraerPrecio(cantidadD);\nassert.ok(\n  cantidadA < cantidadD &&\n    precioProductoA < precioProductoD &&\n    precioTotalA < precioTotalD,\n  \"No aumento la cantidad y el precio del producto\"\n);",
              "err": {},
              "uuid": "f71725fb-0c96-42c2-8950-bccd2150c0d0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disminuir la cantidad y precio de un producto",
              "fullTitle": "Funciones del carrito de compras Disminuir la cantidad y precio de un producto",
              "timedOut": null,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se aumenta la catidad primero del producto\nlet botonAumentar = await driver.findElement(\n    By.className(\"increase-button\")\n);\nawait botonAumentar.click();\n//Se manda a llamar el boton de disminuir, cantidad y precio\nlet botonDisminuir = await driver.findElement(\n  By.className(\"decrease-button\")\n);\nlet cantidadA = await driver\n  .findElement(By.className(\"quantity\"))\n  .getText();\nlet precioProductoA = await driver\n  .findElement(By.id(\"precio-producto\"))\n  .getText();\nlet precioTotalA = await driver\n  .findElement(By.id(\"precio-total\"))\n  .getText();\nprecioProductoA = extraerPrecio(cantidadA);\nprecioTotalA = extraerPrecio(cantidadA);\nawait botonDisminuir.click();\nlet cantidadD = await driver\n  .findElement(By.className(\"quantity\"))\n  .getText();\nlet precioProductoD = await driver\n  .findElement(By.id(\"precio-producto\"))\n  .getText();\nlet precioTotalD = await driver\n  .findElement(By.id(\"precio-total\"))\n  .getText();\nprecioProductoD = extraerPrecio(cantidadD);\nprecioTotalD = extraerPrecio(cantidadD);\nassert.ok(\n  cantidadA > cantidadD &&\n    precioProductoA > precioProductoD &&\n    precioTotalA > precioTotalD,\n  \"No disminuyo la cantidad y el precio del producto\"\n);",
              "err": {},
              "uuid": "f6c6e015-a18b-47c8-9a6f-65e037b2007c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Eliminar producto, carrito vacio",
              "fullTitle": "Funciones del carrito de compras Eliminar producto, carrito vacio",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton eliminar\nlet botonEliminar = await driver.findElement(By.className(\"fa-trash\"));\nawait botonEliminar.click();\nlet listaCarrito = await driver.findElements(By.css(\".modal-body li\"));\nassert(listaCarrito.length === 0,\n  \"El producto no se elimino\"\n);",
              "err": {},
              "uuid": "da86f752-0833-4f80-8a76-b2b4ae3ae785",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Redirigir a la pagina de detalles de compra",
              "fullTitle": "Funciones del carrito de compras Redirigir a la pagina de detalles de compra",
              "timedOut": null,
              "duration": 714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se manda a llamar el boton de finalizar compra\nlet botonFinalizar = await driver.findElement(By.className(\"buy-button\"));\nawait botonFinalizar.click();\nawait driver.wait(until.urlContains(\"compra.html\"), 1000);\nlet urlActual = await driver.getCurrentUrl();\nassert(urlActual.includes(\"compra.html\"),\n  \"No se redirigio a la pagina de compra\");",
              "err": {},
              "uuid": "46e130fd-622c-4821-966c-17b1b8af7461",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f71725fb-0c96-42c2-8950-bccd2150c0d0",
            "f6c6e015-a18b-47c8-9a6f-65e037b2007c",
            "da86f752-0833-4f80-8a76-b2b4ae3ae785",
            "46e130fd-622c-4821-966c-17b1b8af7461"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1348,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5f56306b-59ee-4dbd-8c68-3ae38f4543dd",
          "title": "Seleccionar un producto",
          "fullFile": "C:\\Users\\VOSTRO 3400\\Documents\\Academia Frontend\\Ejercicio pagina\\tests\\selectProduct.spec.js",
          "file": "\\tests\\selectProduct.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Seleccionar un producto\"",
              "fullTitle": "Seleccionar un producto \"before each\" hook in \"Seleccionar un producto\"",
              "timedOut": null,
              "duration": 2402,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(Browser.CHROME).build();\nawait driver.get(\"http://127.0.0.1:3000/tienda.html\");\n//Se manda a llamar la lista de productos\nlet listaProductos = await driver.findElements(By.css(\"#cards .card\"));\n//Se guarda el primer producto\nlet productoPrueba = listaProductos[0];\n//Se selecciona el producto\nawait productoPrueba.click();",
              "err": {},
              "uuid": "2e74499d-3632-4848-8371-399aeeca5301",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Seleccionar un producto\"",
              "fullTitle": "Seleccionar un producto \"after each\" hook in \"Seleccionar un producto\"",
              "timedOut": null,
              "duration": 114,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "16d01cb5-fc03-4805-8cb2-0e3aa26dd3b1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Advertencia de seleccion de talla y color",
              "fullTitle": "Seleccionar un producto Advertencia de seleccion de talla y color",
              "timedOut": null,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se obtiene el boton de comprar\nlet botonComprar = await driver.findElement(By.className(\"add-to-cart\"));\n//Se hace click\nawait botonComprar.click();\n//Se espera la alerta\nassert(await driver.wait(until.alertIsPresent(), 1000),\n  \"No se mostro la alerta\");",
              "err": {},
              "uuid": "cc1fba0b-d495-4657-b22d-1f83def5a14d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Selecccionar una talla",
              "fullTitle": "Seleccionar un producto Selecccionar una talla",
              "timedOut": null,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se obtienen los botones de tallas\nlet botonesTallas = await driver.findElements(By.className(\"modal-talla\"));\n//Se guarda la primera talla\nlet tallaPrueba = botonesTallas[0];\n//Se obtiene el estilo anterior del boton\nlet estiloAnterior = await tallaPrueba.getCssValue(\"background-color\");\n//Se selecciona una talla\nawait tallaPrueba.click();\n//Se obtiene el estilo actual del boton\nlet estiloActual = await tallaPrueba.getCssValue(\"background-color\");\n//Se comprueba que el estilo anterior sea diferente al actual\nassert(estiloAnterior !== estiloActual,\n  \"El estilo anterior es igual al actual\"\n);",
              "err": {},
              "uuid": "5643d62a-1fd4-4d45-9ce8-4100370ba363",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Selecccionar un color",
              "fullTitle": "Seleccionar un producto Selecccionar un color",
              "timedOut": null,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se obtienen los botones de colores\nlet botonesColores = await driver.findElements(By.className(\"modal-color\"));\n//Se guarda el primer color\nlet colorPrueba = botonesColores[0];\n//Se selecciona un color\nawait colorPrueba.click();\n//Se obtiene el estilo del borde actual del boton\nlet estiloActual = await colorPrueba.getCssValue(\"border\");\n//Se comprueba que existe el borde\nassert.ok(estiloActual,\n  \"No se mostro el borde\"\n);",
              "err": {},
              "uuid": "5441c401-aaff-4d66-a30a-36c3b0e9b922",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Aparece el modal del carrito de compras al agregar un producto",
              "fullTitle": "Seleccionar un producto Aparece el modal del carrito de compras al agregar un producto",
              "timedOut": null,
              "duration": 272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Se obtienen los botones de tallas\nlet botonesTallas = await driver.findElements(By.className(\"modal-talla\"));\n//Se guarda la primera talla\nlet tallaPrueba = botonesTallas[0];\n//Se obtienen los botones de colores\nlet botonesColores = await driver.findElements(By.className(\"modal-color\"));\n//Se guarda el primer color\nlet colorPrueba = botonesColores[0];\nawait tallaPrueba.click();\nawait colorPrueba.click();\n//Se obtiene el boton de comprar\nlet botonComprar = await driver.findElement(By.className(\"add-to-cart\"));\n//Se hace click\nawait botonComprar.click();\n//Se optiene el modal de compra\nlet modalCompra = await driver.wait(\n  until.elementLocated(By.className(\"modal-carrito\")),\n  1000\n);\nawait driver.wait(until.elementIsVisible(modalCompra), 1000);\n//Se coprueba que exista el modal\nassert.ok(modalCompra, \"El modal no se mostro\");",
              "err": {},
              "uuid": "85fd2f7a-426c-425c-aa9a-65d400257f0c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc1fba0b-d495-4657-b22d-1f83def5a14d",
            "5643d62a-1fd4-4d45-9ce8-4100370ba363",
            "5441c401-aaff-4d66-a30a-36c3b0e9b922",
            "85fd2f7a-426c-425c-aa9a-65d400257f0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 857,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "customReportFilename",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./reports_test",
        "reportFilename": "customReportFilename"
      },
      "version": "6.2.0"
    }
  }
}